DROP TABLE EMAILS_TO;
DROP TABLE EMAILS_DELETED;
DROP TABLE EMAILS;

ALTER TABLE FILES DROP INDEX IX_FILES_03;

ALTER TABLE BLOCKCHAIN CHANGE TYPE TYPE ENUM('F', 'B') NOT NULL COMMENT 'F - File, B - Bulk transaction';

ALTER TABLE BLOCKCHAIN_INFO DROP FOREIGN KEY BLOCKCHAIN_INFO_ibfk_1;
ALTER TABLE BLOCKCHAIN_INFO ADD CONSTRAINT FK_BLOCKCHAIN_INFO_01 FOREIGN KEY FK_BLOCKCHAIN_INFO_01(FK_ID_CLIENT) REFERENCES OAUTH_CLIENTS(ID_CLIENT) ON DELETE CASCADE;

ALTER TABLE BULK_EVENTS DROP FOREIGN KEY BULK_EVENTS_ibfk_1;
ALTER TABLE BULK_EVENTS ADD CONSTRAINT FK_BULK_EVENTS_01 FOREIGN KEY FK_BULK_EVENTS_01(FK_ID_BULK) REFERENCES BULK_TRANSACTIONS(ID_BULK_TRANSACTION) ON DELETE CASCADE;

ALTER TABLE FILES_SIGNATURE DROP FOREIGN KEY FILES_SIGNATURE_ibfk_1;
ALTER TABLE FILES_SIGNATURE ADD CONSTRAINT FK_FILES_SIGNATURE_01 FOREIGN KEY FK_FILES_SIGNATURE_01(FK_ID_BULK) REFERENCES BULK_TRANSACTIONS(ID_BULK_TRANSACTION) ON DELETE CASCADE;

ALTER TABLE MEDIA_EXTENSIONS DROP FOREIGN KEY MEDIA_EXTENSIONS_ibfk_1;
ALTER TABLE MEDIA_EXTENSIONS ADD CONSTRAINT FK_MEDIA_EXTENSIONS_01 FOREIGN KEY FK_MEDIA_EXTENSIONS_01(FK_ID_TYPE) REFERENCES MEDIA_TYPES(ID_TYPE) ON DELETE RESTRICT;

ALTER TABLE SIGNERS DROP FOREIGN KEY SIGNERS_ibfk_1;
ALTER TABLE SIGNERS ADD CONSTRAINT FK_SIGNERS_01 FOREIGN KEY FK_SIGNERS_01(FK_ID_BULK) REFERENCES BULK_TRANSACTIONS(ID_BULK_TRANSACTION) ON DELETE RESTRICT;

ALTER TABLE USERS DROP FOREIGN KEY USERS_ibfk_1;
ALTER TABLE USERS ADD CONSTRAINT FK_USERS_01 FOREIGN KEY FK_USERS_01(TYPE) REFERENCES ACCOUNT_TYPES(ID_TYPE) ON DELETE RESTRICT;

ALTER TABLE USERS_TYPES DROP FOREIGN KEY USERS_TYPES_ibfk_1;
ALTER TABLE USERS_TYPES ADD CONSTRAINT FK_USERS_TYPES_01 FOREIGN KEY FK_USERS_TYPES_01(FK_ID_TYPE) REFERENCES ACCOUNT_TYPES(ID_TYPE) ON DELETE RESTRICT;


ALTER TABLE TRANSLATIONS CHANGE TYPE TYPE ENUM ('AT', 'MT', 'PS') NOT NULL COMMENT 'AT - ACCOUNT_TYPES, MT - MEDIA_TYPES, PS - PROCESSES STATUS';

INSERT INTO TRANSLATIONS(ID_TRANSLATION, LANG, TYPE, VALUE) VALUES (20, 'en_US', 'PS', 'Getting certificate');
INSERT INTO TRANSLATIONS(ID_TRANSLATION, LANG, TYPE, VALUE) VALUES (20, 'es_ES', 'PS', 'Obteniendo certificado');
INSERT INTO TRANSLATIONS(ID_TRANSLATION, LANG, TYPE, VALUE) VALUES (21, 'en_US', 'PS', 'Certificate');
INSERT INTO TRANSLATIONS(ID_TRANSLATION, LANG, TYPE, VALUE) VALUES (21, 'es_ES', 'PS', 'Certificado');
INSERT INTO TRANSLATIONS(ID_TRANSLATION, LANG, TYPE, VALUE) VALUES (22, 'en_US', 'PS', 'Pending');
INSERT INTO TRANSLATIONS(ID_TRANSLATION, LANG, TYPE, VALUE) VALUES (22, 'es_ES', 'PS', 'Pendiente');
INSERT INTO TRANSLATIONS(ID_TRANSLATION, LANG, TYPE, VALUE) VALUES (23, 'en_US', 'PS', 'Signed');
INSERT INTO TRANSLATIONS(ID_TRANSLATION, LANG, TYPE, VALUE) VALUES (23, 'es_ES', 'PS', 'Firmado');
INSERT INTO TRANSLATIONS(ID_TRANSLATION, LANG, TYPE, VALUE) VALUES (24, 'en_US', 'PS', 'Completed');
INSERT INTO TRANSLATIONS(ID_TRANSLATION, LANG, TYPE, VALUE) VALUES (24, 'es_ES', 'PS', 'Completado');
INSERT INTO TRANSLATIONS(ID_TRANSLATION, LANG, TYPE, VALUE) VALUES (25, 'en_US', 'PS', 'Canceled');
INSERT INTO TRANSLATIONS(ID_TRANSLATION, LANG, TYPE, VALUE) VALUES (25, 'es_ES', 'PS', 'Cancelado');
INSERT INTO TRANSLATIONS(ID_TRANSLATION, LANG, TYPE, VALUE) VALUES (26, 'en_US', 'PS', 'Expired');
INSERT INTO TRANSLATIONS(ID_TRANSLATION, LANG, TYPE, VALUE) VALUES (26, 'es_ES', 'PS', 'Caducado');

source ../tables/PROCESSES_STATUS.sql;
source ../tables/PROCESSES.sql;
source ../tables/PROCESSES_CLIENTS.sql;

-- Insert processes status
source ../sqls/processes_status.sql;

-- Insert Processes Clients and update data
DELIMITER //
DROP PROCEDURE IF EXISTS InsertClients//
CREATE PROCEDURE InsertClients()
  BEGIN
    DECLARE v_finished INT DEFAULT 0;
    DECLARE v_id_element INT;
    DECLARE v_type VARCHAR(1);
    DECLARE v_client_type VARCHAR(1);
    DECLARE v_id_client INT;
    DECLARE p_cursor CURSOR FOR SELECT TYPE, ID_ELEMENT, CLIENT_TYPE, FK_ID_CLIENT FROM PROCESSES;
    -- declare NOT FOUND handler
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET v_finished = 1;

    -- Create initial processes
    INSERT INTO PROCESSES(TYPE, ID_ELEMENT, CLIENT_TYPE, FK_ID_CLIENT, FK_ID_STATUS, NAME, CTRL_DATE)
      SELECT 'N', ID_FILE, CLIENT_TYPE, FK_ID_CLIENT, CONFIRMED + 1, NAME, CTRL_DATE FROM FILES WHERE MODE = 'N';

    INSERT INTO PROCESSES(TYPE, ID_ELEMENT, CLIENT_TYPE, FK_ID_CLIENT, FK_ID_STATUS, NAME, CTRL_DATE)
      SELECT 'S', B.ID_BULK_TRANSACTION, B.CLIENT_TYPE, B.FK_ID_CLIENT,
        CASE WHEN B.CLOSED = 0 THEN 1 WHEN B.CLOSED = 1 AND B.CONFIRMED = 0 THEN 2 ELSE 3 END, F.NAME, B.CTRL_DATE
      FROM BULK_TRANSACTIONS B, FILES_SIGNATURE S, FILES F
      WHERE B.TYPE = 'Sign Document' AND S.FK_ID_BULK = B.ID_BULK_TRANSACTION AND F.ID_FILE = S.FK_ID_FILE;

    OPEN p_cursor;

    get_process: LOOP
      FETCH p_cursor INTO v_type, v_id_element, v_client_type, v_id_client;
      IF v_finished = 1 THEN
        LEAVE get_process;
      END IF;
      -- Body

      -- Insert creator
      INSERT INTO PROCESSES_CLIENTS(TYPE, ID_ELEMENT, CLIENT_TYPE, FK_ID_CLIENT)
      VALUES (v_type, v_id_element, v_client_type, v_id_client);

      IF v_type = 'S' THEN
        -- Signature
        INSERT INTO PROCESSES_CLIENTS(TYPE, ID_ELEMENT, CLIENT_TYPE, FK_ID_CLIENT)
        SELECT v_type, v_id_element, 'U', FK_ID_USER FROM SIGNERS
        WHERE FK_ID_USER IS NOT NULL AND (v_client_type != 'U' OR FK_ID_USER != v_id_client) AND FK_ID_BULK = v_id_element;

        BEGIN
          -- Fill additional data with signers information and status
          DECLARE v_data VARCHAR(4000);
          DECLARE v_email VARCHAR(256);
          DECLARE v_name VARCHAR(256);
          DECLARE v_signed VARCHAR(1);
          DECLARE v_finished2 INT DEFAULT 0;
          DECLARE p_cursor2 CURSOR FOR SELECT EMAIL, NAME, SIGNED FROM SIGNERS WHERE FK_ID_BULK = v_id_element;
          -- declare NOT FOUND handler
          DECLARE CONTINUE HANDLER FOR NOT FOUND SET v_finished2 = 1;
          OPEN p_cursor2;

          fill_data: LOOP
            FETCH p_cursor2 INTO v_email, v_name, v_signed;
            IF v_finished2 = 1 THEN
              LEAVE fill_data;
            END IF;
            -- Body

            IF v_data IS NULL THEN
              SET v_data = '{';
            ELSE
              SET v_data = CONCAT(v_data, ',');
            END IF;

            -- Store signers
            SET v_data = CONCAT(v_data, '"', v_email, '":{"name":"', v_name, '","signed":"', v_signed, '"}');

          END LOOP fill_data;
          CLOSE p_cursor2;

          SET v_data = CONCAT(v_data, '}');
          UPDATE PROCESSES SET ADDITIONAL_DATA = v_data WHERE TYPE = v_type AND ID_ELEMENT = v_id_element;
        END;

      END IF;
    END LOOP get_process;

    CLOSE p_cursor;
  END //
DELIMITER ;

CALL InsertClients();
DROP PROCEDURE IF EXISTS InsertClients;

COMMIT;